<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SdTask extends BaseSdTask
{
	const OPEN = 0;
	const IN_PROGRESS = 1;
	const COMPLETED = 2;
	const ACCEPTED = 3;
	
	public function getPriorityText($int = NULL)
	{
		if(is_null($int))
			$int = $this->getPriority();

		return SdTaskTable::$priorityArr[$int];
	}

	public function getBusinessValueText($int = NULL)
	{
		if(is_null($int))
			$int = $this->getBusinessValue();

		return SdTaskTable::$businessValueArr[$int];
	}

	public function getDevelopmentEffortText($int = NULL)
	{
		if(is_null($int))
			$int = $this->getDevelopmentEffort();

		return SdTaskTable::$developmentEffortArr[$int];
	}

	public function getStatusText($int = NULL)
	{
		if(is_null($int))
			$int = $this->getStatus();

		return SdTaskTable::$statusArr[$int];
	}

	public function getUserText($int = NULL)
	{
		if(is_null($int))
			$int = $this->getUserId();

		$projectUserArr = SdProjectTable::getProjectUserArray($this->getProjectId());
		return $projectUserArr[$int];
	}
	
	public function getUserIdText($id = NULL)
	{
		if(is_numeric($id))
		{
			$User = Doctrine::getTable('SdUser')->find($id)->getFullName();
			return $User;	
		}
		else
			return '-unassigned-';
		
	}

	/**
	 * Set the value of [estimated_hours] column.
	 * 
	 * @param      double $v new value
	 * @return     SdTask The current object (for fluent API support)
	 */
	public function setEstimatedHours($v)
	{
		if(!is_numeric($v))
		{
			if(trim($v)!='')
				return $this;
		}
		if ($this->estimated_hours !== $v) {
			$this->_set('estimated_hours', $v);
		}
		return $this;
	
	} // setEstimatedHours()
	
    // Override save() function
	public function save(Doctrine_Connection $conn = null, $options = array())
	{
		$recordHistory = isset($options['recordHistory']) ? $options['recordHistory'] : true;
		$firstSprintChange = isset($options['firstSprintChange']) ? $options['firstSprintChange'] : true;
		$firstArchivedChange = isset($options['firstArchivedChange']) ? $options['firstArchivedChange'] : true;
		
		$modifiedArray = $this->getModified();
		
		//check if we should throw any exceptions
		
		//check if the task is being set to completed or accepted if it has uncompleted or unaccepted subtasks
		if(isset($modifiedArray['status']) && $modifiedArray['status']>=self::COMPLETED)
		{
			if(!$this->checkChildrenStatus($modifiedArray['status']))
			{
				if($modifiedArray['status']==self::COMPLETED)
					throw new Exception('Unable to save task with a status of "completed" because it has uncompleted subtasks.');
				elseif($modifiedArray['status']==self::ACCEPTED)
					throw new Exception('Unable to save task with a status of "accepted" because it has unaccepted subtasks.');
				return false;
			}
		}

		//check if the task is being set to completed or below, if the parent has a greater status
		if(isset($modifiedArray['status']) && $modifiedArray['status'] < self::ACCEPTED)
		{
			if(!is_null($this->getParentId()))
			{
				$parentTask = Doctrine::getTable('SdTask')->find($this->getParentId());
				$parentStatus = $parentTask->getStatus();
				if($parentStatus > self::IN_PROGRESS && $parentStatus > $modifiedArray['status'])
				{
					throw new Exception('Unable to save task with a status of "'.SdTaskTable::$statusArr[$modifiedArray['status']].'" because its parent has a status of "'.SdTaskTable::$statusArr[$parentStatus].'"');
				}
			}
		}

		if(!$this->isNew() && $recordHistory)
		{
			$this->doHistoryMagic($options);
		}
		else
		{
			//if a task is being archived or unarchived, remove the parent reference and archive all subtasks
			if(isset($modifiedArray['is_archived']) && !$this->isNew())
			{
				if($firstArchivedChange)
					$this->setParentId(null);
				$childTasks = $this->Children;
				foreach($childTasks as $childTask)
				{
					$childTask->setIsArchived($modifiedArray['is_archived']);
					$childTask->setSprintId($modifiedArray['sprint_id']);
					$saveOptions = array();
					$saveOptions['firstArchivedChange'] = false;
					$childTask->save($conn, $saveOptions);
				}
			}
		
			//move subtasks to the same sprint (or backlog)
			elseif(isset($modifiedArray['sprint_id']) && !$this->isNew())
			{
				if($firstSprintChange)
					$this->setParentId(null);
				$childTasks = $this->Children;
				foreach($childTasks as $childTask)
				{
					$childTask->setSprintId($modifiedArray['sprint_id']);
					$saveOptions = array();
					$saveOptions['firstSprintChange'] = false;
					$childTask->save($conn, $saveOptions);
				}
			}
				
			parent::save($conn); 
		}
	}
	
	// function to get old and new object value
	public function doHistoryMagic($options)
	{
		$modifiedArray = $this->getModified();
		$ObjPrevious = Doctrine::getTable('SdTask')->find($this->getId());
		foreach($modifiedArray as $modifiedField => $newValue)
		{
			//first do something sort of unrelated
			if($modifiedField=='status')
			{
				if($newValue==3)
					$ObjPrevious->setDateConfirmed(date('Y-m-d')); 
				else
					$ObjPrevious->setDateConfirmed(NULL); 
			}
		   $functionName = "";
		   $appendString = "";
		   $changeType = $modifiedField;		   
		   if(in_array($modifiedField, array('business_value','development_effort','priority','status','user_id')))
		   {
				$appendString = 'Text';	
		   }
		   if($modifiedField != 'UPDATED_AT')
		   {
			   if(strpos('_', $modifiedField))
			   {   
				   $fieldNameArray = explode('_', $modifiedField); 
				   foreach($fieldNameArray as $fieldNamePart)
				   {
						$functionName .= ucfirst(strtolower($fieldNamePart));
				   }
			   } 
			   else
			   {
					$functionName = ucfirst(strtolower($modifiedField));
			   }
			   
				//see if it's an Id
				$oldId = $ObjPrevious->{'get'.$functionName}(); 
				if(!is_integer($oldId))
					$oldId = NULL;
				$newId = $this->{'get'.$functionName}();
				if(!is_integer($newId))
					$newId = NULL;
				
				$oldValue = $ObjPrevious->{'get'.$functionName.$appendString}();
				if($appendString == 'Text')
					$newValueStr = $this->{'get'.$functionName.$appendString}($newValue);
				else
					$newValueStr = $newValue;
				if(trim($oldValue)!=trim($newValueStr))
				{
					if($modifiedField=='user_id')
						$this->sendAssignmentEmail($newValue, false);
					$this->saveTaskHistory($changeType, $oldValue, $newValueStr, $oldId, $newId);
				}
				$ObjPrevious->{'set'.$functionName}($newValue);   
		   }
		}
		if(!empty($modifiedArray)){
			$options['recordHistory'] = false;
			$ObjPrevious->save(null, $options);
		}
	}
	
	// Saves all task history
	public function saveTaskHistory($changeType, $oldValue = '', $newValue = '', $oldId = NULL, $newId = NULL)
	{
		$userId = sfContext::getInstance()->getUser()->getId();
	   $taskHistory = new SdTaskHistory();
	   $taskHistory->setTaskId($this->getId());
	   $taskHistory->setUserId($userId);
	   $taskHistory->setChangeType($changeType);
	   $taskHistory->setPreviousValue($oldValue);
	   $taskHistory->setNewValue($newValue);
	   $taskHistory->setPreviousId($oldId);
	   $taskHistory->setNewId($newId);
	   $taskHistory->save();
	}

	public function sendAssignmentEmail($userId, $new = false)
	{
		if($userId==sfContext::getInstance()->getUser()->getId())
			return true;
		$user = Doctrine::getTable('SdUser')->find($userId);
		ProjectConfiguration::registerZend();
		$mail = new Zend_Mail();
		sfLoader::loadHelpers(array('Url'));
		$emailLink = url_for('@project_task?task_id='.$this->getId(), true);
		
		if($new)
		{
			$mail->setSubject("{$this->getProject()->getName()} - New Task: {$this->getName()}");
			$bodyText = "{$user->getFullName()},\n\n".sfContext::getInstance()->getUser()->getFullName()." has created a new task and assigned it to you:\n\n";
		}
		else
		{
			$mail->setSubject("{$this->getProject()->getName()} - Assigned Task: {$this->getName()}");
			$bodyText = "{$user->getFullName()},\n\n".sfContext::getInstance()->getUser()->getFullName()." has assigned a task to you:\n\n";
		}
		$bodyText .= "Name: {$this->getName()}\n";
		$bodyText .= "Project: {$this->getProject()->getName()}\n";
		if(!is_null($this->getSprintId()))
			$bodyText .= "Sprint: {$this->getSprint()->getName()}\n";
		else
			$bodyText .= "Sprint: not yet assigned to a sprint\n";
		$bodyText .= "Estimated Hours: {$this->getEstimatedHours()}\n";
		$bodyText .= "Priority: {$this->getPriorityText()}\n";
		$bodyText .= "Status: {$this->getStatusText()}\n";
		$bodyText .= "Description:\n\n{$this->getDescription()}\n\n";
		$bodyText .= "You can view the task by clicking the link below:\n\n{$emailLink}\n\n-The ScrumDog Team.";
		
		$mail->setBodyText($bodyText);
		$mail->setFrom('do-not-reply@scrumdog.com', 'ScrumDog Mail System');
		$mail->addTo($user->getEmail());
//var_dump($mail); die();
		$mailSent = EmailSender::send($mail);
		return $mailSent;
	}
	
	private function checkChildrenStatus($status)
	{
		foreach($this->Children as $subTask)
		{
			if($subTask->getStatus() < $status)
			{
				return false;
			}
			elseif(!$subTask->checkChildrenStatus($status))
			{
				return false;
			}
		}
		return true;
	}
	
	public function getChildIdsRecursive($idArray = array())
	{
		foreach($this->Children as $subTask)
		{
			$idArray[] = $subTask->getId();
			$idArray = $subTask->getChildIdsRecursive($idArray);
		}
		return $idArray;
	} 
}