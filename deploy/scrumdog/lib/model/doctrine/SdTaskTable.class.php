<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SdTaskTable extends Doctrine_Table
{
	public static $businessValueArr = array('Low', 'Normal', 'High');
	public static $developmentEffortArr = array('Low', 'Normal', 'High');
	public static $priorityArr = array('Low', 'Normal', 'High');
	public static $statusArr = array('Open', 'In Progress', 'Completed', 'Accepted');
	public static $hoursRangeArr = array('0-1', '1-5', '5-10', '10-20', '20+');

	//This function should be usable in many situations
	public static function getTasks($filters, $sort = array(), $options = array())
	{
//var_dump($sort);
//var_dump($filters); //die();
		//setup the base query
		$q = Doctrine_Query::create()
		->from('SdTask t');

		$selectString = 't.*';
		if(isset($options['joinProjects']))
		{
			$selectString .= ', p.*';
			$q->leftJoin('t.Project SdProject p');
		}
		if(isset($options['joinSprints']))
		{
			$selectString .= ', s.*';
			$q->leftJoin('t.Sprint SdSprint s');
		}
		
		$q->select($selectString);

		//add filters
		if(is_array($filters))
		{
			$filterCount=0;
			foreach($filters as $fieldName => $fieldValue)
			{
				if(trim($fieldValue)!='')
				{
					if($filterCount==0)
					{
						$whereFunc = 'where';
						$whereInFunc = 'whereIn';
					}
					else
					{
						$whereFunc = 'andWhere';
						$whereInFunc = 'andWhereIn';
					}
					switch($fieldName)
					{
						case 'name':
							$q->{$whereFunc}("t.".$fieldName." LIKE ?", '%'.$fieldValue.'%');
							break;
						case 'is_archived':
							if($fieldValue==0)
								$q->{$whereFunc}("t.".$fieldName." != 1");
							else
								$q->{$whereFunc}("t.".$fieldName." = ?", $fieldValue);
							break;
						//numeric values
						case 'project_id':
						case 'sprint_id':
						case 'user_id':
							if($fieldValue=='null')
							{
								$q->{$whereFunc}("t.".$fieldName." IS NULL");
								break;
							}
							elseif($fieldValue=='not null')
							{
								$q->{$whereFunc}("t.".$fieldName." IS NOT NULL");
								break;
							}
						case 'status':
							if($fieldValue=='not-completed')
								$q->{$whereFunc}("t.".$fieldName." IN (0,1)");
							elseif($fieldValue=='not-accepted')
								$q->{$whereFunc}("t.".$fieldName." IN (0,1,2)");
							else
								$q->{$whereFunc}("t.".$fieldName." = ?", $fieldValue);
							break;
						case 'estimated_hours':
							$hoursArray = explode('-', $fieldValue);
							if(count($hoursArray)>1)
							{
								$q->{$whereFunc}("t.".$fieldName." >= ?", $hoursArray[0]);
								$q->andWhere("t.".$fieldName." <= ?", $hoursArray[1]);
							}
							else
							{
								$fieldValue = str_replace('+', '', $fieldValue);
								$q->{$whereFunc}("t.".$fieldName." >= ?", $fieldValue);
							}
							break;
						case 's.active':
							$q->{$whereFunc}($fieldName." = ?", $fieldValue);
							break;
						case 'id':
							if(strpos($fieldValue, "!=")!==false)
							{
								$q->{$whereFunc}("t.".$fieldName." ".$fieldValue);
							}
							elseif(strpos($fieldValue, "NOT IN")!==false)
							{
								$q->{$whereFunc}("t.".$fieldName." ".$fieldValue);
							}
							else
							{
								$q->{$whereFunc}("t.".$fieldName." = ?", $fieldValue);
							}
							break;
						default:
							$q->{$whereFunc}("t.".$fieldName." = ?", $fieldValue);
					}
					$filterCount++;
				}
			}
		}

		//add sorts
		if(is_array($sort))
		{
			$orderString = '';
			$i=0;
			foreach($sort as $fieldName => $fieldValue)
			{
				if($fieldValue=='asc' || $fieldValue=='desc')
				{
					if($i>0)
						$orderString .= ', ';
					switch($fieldName)
					{
						case 'user_id':
							$q->leftJoin('t.User SdUser u');
							$orderString = "u.full_name ".$fieldValue;
							break;
						case 'project_id':
							$orderString = "p.name ".$fieldValue;
							break;
						default:
							$orderString .= 't.'.$fieldName.' '.$fieldValue;
					}
					$i++;
				}
			}
			if(trim($orderString)!='')
				$q->orderby($orderString);
		}

		//echo $q->getSql(); echo('<br>'); //die();
		
		$tasks = $q->execute();

		return $tasks;
	}

	public static function assignProjectTasks($project_id, $old_user_id, $new_user_id = NULL)
	{
		$new_user_id = is_null($new_user_id) ? 'NULL' : $new_user_id;
		$q = Doctrine_Query::create()
			->update('SdTask')
    		->set('user_id', $new_user_id)
    		->where('user_id = ?', $old_user_id)
			->andWhere('project_id = ?', $project_id);

//echo($q->getSql()); //die();

		$q->execute();
	}
}