<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SdQuestion extends BaseSdQuestion
{
	public $taskHours;
	
    // Override save() function
	public function save(Doctrine_Connection $conn = null, $recordHistory = true)
	{
		if(!$this->isNew() && $recordHistory)
		{
			$this->doHistoryMagic();
		}
		else
		{
			parent::save($conn); 
		}
	}
	
	// function to get old and new object value
	public function doHistoryMagic()
	{
		$modifiedArray = $this->getModified();
		$ObjPrevious = Doctrine::getTable('SdQuestion')->find($this->getId());
		$userId = sfContext::getInstance()->getUser()->getId();
		foreach($modifiedArray as $modifiedField => $newValue)
		{
		   $functionName = "";
		   $appendString = "";
		   $changeType = $modifiedField;		   
		   if(in_array($modifiedField, array('project_id','user_id')))
		   {
				$appendString = 'Text';	
		   }
		   if($modifiedField != 'UPDATED_AT')
		   {
			   if(strpos('_', $modifiedField))
			   {   
				   $fieldNameArray = explode('_', $modifiedField); 
				   foreach($fieldNameArray as $fieldNamePart)
				   {
						$functionName .= ucfirst(strtolower($fieldNamePart));
				   }
			   } 
			   else
			   {
					$functionName = ucfirst(strtolower($modifiedField));
			   }
			   
				//see if it's an Id
				$oldId = $ObjPrevious->{'get'.$functionName}(); 
				if(!is_integer($oldId))
					$oldId = NULL;
				$newId = $this->{'get'.$functionName}();
				if(!is_integer($newId))
					$newId = NULL;
				
				$oldValue = $ObjPrevious->{'get'.$functionName.$appendString}();
				if($appendString == 'Text')
					$newValueStr = $this->{'get'.$functionName.$appendString}($newValue);
				else
					$newValueStr = $newValue;
				if(trim($oldValue)!=trim($newValueStr))
				{
					$this->saveHistory($this->getId(), $userId, $changeType, $oldValue, $newValueStr, $oldId, $newId);
				}
				$ObjPrevious->{'set'.$functionName}($newValue);   
		   }
		}

		if(!empty($modifiedArray))
		{
			$ObjPrevious->save(null, false);
			if($userId != $this->getUserId())
			{
				//$this->sendModificationEmail($modifiedArray);
			}
		}
	}
	
	// Saves all task history
	function saveHistory($questionId, $userId, $changeType, $oldValue = 'NULL', $newValue = 'NULL', $oldId = NULL, $newId = NULL)
	{
	   $history = new SdQuestionHistory();
	   $history->setQuestionId($questionId);
	   $history->setUserId($userId);
	   $history->setChangeType($changeType);
	   $history->setPreviousValue($oldValue);
	   $history->setNewValue($newValue);
	   $history->setPreviousId($oldId);
	   $history->setNewId($newId);
	   $history->save();
	}

	public function sendModificationEmail($question, $new = false)
	{
		$user = Doctrine::getTable('SdUser')->find($this->getUserId());
		ProjectConfiguration::registerZend();
		$mail = new Zend_Mail();
		sfLoader::loadHelpers(array('Url'));
		$emailLink = url_for('@project_task?task_id='.$this->getId(), true);
		
		if($new)
		{
			$mail->setSubject("{$this->getProject()->getName()} - New Task: {$this->getName()}");
			$bodyText = "{$user->getFullName()},\n\n".sfContext::getInstance()->getUser()->getFullName()." has created a new task and assigned it to you:\n\n";
		}
		else
		{
			$mail->setSubject("{$this->getProject()->getName()} - Assigned Task: {$this->getName()}");
			$bodyText = "{$user->getFullName()},\n\n".sfContext::getInstance()->getUser()->getFullName()." has assigned a task to you:\n\n";
		}
		$bodyText .= "Name: {$this->getName()}\n";
		$bodyText .= "Project: {$this->getProject()->getName()}\n";
		if(!is_null($this->getSprintId()))
			$bodyText .= "Sprint: {$this->getSprint()->getName()}\n";
		else
			$bodyText .= "Sprint: not yet assigned to a sprint\n";
		$bodyText .= "Estimated Hours: {$this->getEstimatedHours()}\n";
		$bodyText .= "Priority: {$this->getPriorityText()}\n";
		$bodyText .= "Status: {$this->getStatusText()}\n";
		$bodyText .= "Description:\n\n{$this->getDescription()}\n\n";
		$bodyText .= "You can view the task by clicking the link below:\n\n{$emailLink}\n\n-The ScrumDog Team.";
		
		$mail->setBodyText($bodyText);
		$mail->setFrom('do-not-reply@scrumdog.com', 'ScrumDog Mail System');
		$mail->addTo($user->getEmail());
//var_dump($mail); die();
		$mailSent = EmailSender::send($mail);
		return $mailSent;
	}
	
		/*
		* @author Damien Filiatrault
		* @return Doctrine Collection taskHours
		*/
	
		public function getTaskHours()
		{
			if(isset($this->taskHours))
				return $this->taskHours;
				
			$filters = array();
			$filters['startDate'] = $this->getDate();
			$filters['endDate'] = $this->getDate();
			$filters['user_id'] = $this->getUserId();
			$filters['project_id'] = $this->getProjectId();
			
			$sort = array();
			$sort['date'] = 'asc';
			$sort['user_id'] = 'asc';
			
			$options = array();
			$options['joinTasks'] = true;
			
			$this->taskHours = Doctrine::getTable('SdTaskHours')->getTaskHours($filters, $sort, $options);
			
			return $this->taskHours;
		}
}